'河北省': ['内蒙古自治区', '山西省', '山东省', '北京市', '天津市', '辽宁省'],
'山东省': ['河北省', '天津市', '山西省', '湖南省', '江苏省'],
'安徽省': ['山东省', '湖南省', '湖北省', '江西省', '浙江省', '江苏省'],
'江苏省': ['山东省', '安徽省', '上海市', '浙江省'],
'上海市': ['江苏省', '浙江省'],
'浙江省': ['上海市', '安徽省', '江西省', '福建省', '江苏省'],
'江西省': ['安徽省', '湖北省', '湖南省', '广东省', '福建省', '浙江省'],
'福建省': ['浙江省', '江西省', '广东省'],
'黑龙江省': ['内蒙古自治区', '吉林省'],
'吉林省': ['内蒙古自治区', '黑龙江省'],
'辽宁省': ['内蒙古自治区', '吉林省', '河北省'],
'北京市': ['河北省', '天津市'],
'天津市': ['河北省', '北京市'],
'海南省': [],
'台湾省': [],
'澳门特别行政区': [],
'香港特别行政区': [],
'新疆维吾尔自治区': ['西藏自治区', '青海省', '甘肃省'],
'西藏自治区': ['新疆维吾尔自治区', '青海省', '四川省', '云南省'],
'青海省': ['西藏自治区', '新疆维吾尔自治区', '甘肃省', '四川省'],
'甘肃省': ['新疆维吾尔自治区', '青海省', '四川省', '内蒙古自治区', '陕西省', '宁夏回族自治区'],
'四川省': ['西藏自治区', '青海省', '甘肃省', '陕西省', '重庆市', '贵州省', '云南省'],
'云南省': ['四川省', '贵州省', '广西壮族自治区'],
'内蒙古自治区': ['甘肃省', '宁夏回族自治区', '陕西省', '山西省', '河北省', '吉林省', '辽宁省', '黑龙江省'],
'宁夏回族自治区': ['陕西省', '内蒙古自治区', '甘肃省'],
'陕西省': ['宁夏回族自治区', '甘肃省', '四川省', '内蒙古自治区', '重庆市', '湖北省', '湖南省', '山西省'],
'重庆市': ['陕西省', '四川省', '贵州省', '湖南省', '湖北省'],
'贵州省': ['重庆市', '四川省', '云南省', '广西壮族自治区', '湖南省'],
'广西壮族自治区': ['云南省', '贵州省', '湖南省', '广东省'],
'山西省': ['内蒙古自治区', '陕西省', '河南省', '山东省', '河北省'],
'河南省': ['山西省', '陕西省', '湖北省', '安徽省', '山东省'],
'湖北省': ['河南省', '重庆市', '陕西省', '湖南省', '江西省', '安徽省'],
'湖南省': ['湖北省', '重庆市', '贵州省', '广西壮族自治区', '广东省', '江西省', '安徽省'],
'广东省': ['湖南省', '江西省', '福建省', '广西壮族自治区']}

河北省：0
山东省：1
安徽省：2
江苏省：3
上海市：4
浙江省：5
江西省：6
福建省：7
黑龙江省：8
吉林省：9
辽宁省：10
北京市：11
天津市：12
海南省：13
台湾省：14
澳门特别行政区：15
香港特别行政区：16
新疆维吾尔自治区:17
西藏自治区:18
青海省:19
甘肃省：20
四川省：21
云南省：22
内蒙古自治区：23
宁夏回族自治区：24
陕西省：25
重庆市：26
贵州省：27
广西壮族自治区：28
山西省：29
河南省：30
湖北省：31
湖南省：32
广东省：33

'0': ['23', '29', '1', '11', '12', '10'],
'1': ['0', '12', '29', '32', '3'],
'2': ['1', '32', '31', '6', '5', '3'],
'3': ['1', '2', '4', '5'],
'4': ['3', '5'],
'5': ['4', '2', '6', '7', '3'],
'6': ['2', '31', '32', '33', '7', '5'],
'7': ['5', '6', '33'],
'8': ['23', '9'],
'9': ['23', '8'],
'10': ['23', '9', '0'],
'11': ['0', '12'],
'12': ['0', '11'],
'13': [],
'14': [],
'15': [],
'16': [],
'17': ['18', '19', '20'],
'18': ['17', '19', '21', '22'],
'19': ['18', '17', '20', '21'],
'20': ['17', '19', '21', '23', '25', '24'],
'21': ['18', '19', '20', '25', '26', '27', '22'],
'22': ['21', '27', '28'],
'23': ['20', '24', '25', '29', '0', '9', '10', '8'],
'24': ['25', '23', '20'],
'25': ['24', '20', '21', '23', '26', '31', '32', '29'],
'26': ['25', '21', '27', '32', '31'],
'27': ['26', '21', '22', '28', '32'],
'28': ['22', '27', '32', '33'],
'29': ['23', '25', '30', '1', '0'],
'30': ['29', '25', '31', '2', '1'],
'31': ['30', '26', '25', '32', '6', '2'],
'32': ['31', '26', '27', '28', '33', '6', '2'],
'33': ['32', '6', '7', '28']}

#Elwin
import time
import matplotlib.pyplot as plt
import numpy as np
import cv2
import requests

class ChinaMap():
    """China map dynamic visualization class"""
    
    def __init__(self):
        
        print('[INFO] Try to get China map data...')
        _start = time.time()
        _file = requests.get("https://s3.ax1x.com/2020/12/30/rqxLR0.jpg")
        _img = cv2.imdecode(np.frombuffer(_file.content, np.uint8), 1)
        self.img = cv2.cvtColor(_img,cv2.COLOR_BGR2GRAY)
        print('[INFO] OK! Time: %.3f s' % (time.time() - _start))
        del _start,_img
        
        self.nameList = np.array(["北京市","天津市","上海市","重庆市","河北省","山西省","辽宁省","吉林省","黑龙江省",
                      "江苏省","浙江省","安徽省","福建省","江西省","山东省","河南省","湖北省","湖南省",
                      "广东省","海南省","四川省","贵州省","云南省","陕西省","甘肃省","青海省","台湾省",
                      "内蒙古自治区","广西壮族自治区","西藏自治区","宁夏回族自治区","新疆维吾尔自治区",
                      "香港特别行政区","澳门特别行政区"])
        
        self.locList = np.array([[3277,1373],[3340,1444],[3732,2164],[2547,2378],[3155,1560],[3011,1586],
                        [3748,1146],[3845,929],[3909,746],[3519,2105],[3637,2264],[3401,2135],
                        [3506,2622],[3312,2443],[3338,1684],[3100,1881],[3170,2277],[3073,2504],
                        [3115,2977],[2862,3273],[2356,2257],[2557,2658],[2210,2783],[2741,1930],
                        [2367,1750],[2212,1680],[3808,2747],[2937,1300],[2686,3100],[1308,2229],
                        [2558,1529],[1325,855],[3198,3060],[3136,3062]])
        
        self.adjList = [[1,4],
                        [0,4,14],
                        [9,10],
                        [20,23,16,17,21],
                        [0,1,27,5,15,14,6],
                        [4,27,23,15],
                        [7,27,4],
                        [8,27,6],
                        [27,7],
                        [14,11,10,2],
                        [2,9,11,13,12,26],
                        [9,14,15,16,13,10],
                        [10,13,18,26],
                        [10,11,16,17,18,12],
                        [4,15,11,9,1],
                        [14,4,5,23,16,11],
                        [15,23,3,17,13,11],
                        [16,3,21,28,18,13],
                        [12,13,17,28,19,32,33],
                        [18,28,33],
                        [24,25,29,22,21,3,23],
                        [3,20,22,28,17],
                        [29,20,21,28],
                        [27,30,24,20,3,16,15,5],
                        [27,31,25,20,23,30],
                        [24,31,29,20],
                        [12,10],
                        [31,24,30,23,5,4,6,7,8],
                        [17,21,22,18,19],
                        [31,25,20,22],
                        [27,24,23],
                        [24,25,29,27],
                        [18,33],
                        [18,32,19]]
        
        self.colorList = np.array([0 for index in range(len(self.nameList))])
        
        print(self.colorList)
        self.color = ["dimgrey","red","orange","#32CD32","#1E90FF"]


    def showMap(self):
        """Show China map separately"""
        plt.axis(False)
        plt.imshow(self.img,cmap='gray')
        plt.show()

    def _getLocation(self,provinceIndex):
        """Get the location information of the province"""
        x,y = self.locList[provinceIndex]
        return x,y
        
    def changeColor(self,provinceIndex,color):
        self.colorList[provinceIndex] = color
        
    def getColor(self,provinceIndex):
        return self.colorList[provinceIndex]
        
    def getProvinceName(self,index):
        return self.nameList[index]
        
    def draw(self,time=10,showEdge = True,savePath = None):
        """Draw the next frame"""
        plt.cla()
        plt.ion()
        
        self._imshow(showEdge,savePath)
        plt.plot()

        plt.pause(time)
        plt.ioff()
        
    def _imshow(self,showEdge = True,savePath = None):
        """Display the map of China and its graphic model"""

        plt.axis(False)
        fig = plt.imshow(self.img,cmap='gray')
        fig.axes.get_xaxis().set_visible(False)
        fig.axes.get_yaxis().set_visible(False)
        
        _colorList = [self.color[i] for i in self.colorList]

        for provinceIndex in range(len(self.locList)):
            x,y = self._getLocation(provinceIndex)
            plt.scatter(x,y,c = _colorList[provinceIndex],s = 100)
            
            if showEdge:
                for nebProvince in self.adjList[provinceIndex]:
                    nebX,nebY = self._getLocation(nebProvince)
                    plt.plot((x,nebX),(y,nebY),c = _colorList[nebProvince])
        
        if savePath:
            plt.savefig(savePath, bbox_inches='tight', pad_inches = 0)

    def reload(self):
        self.colorList = np.array([0 for index in range(len(self.nameList))])
        plt.figure(figsize=(6,6))
        print('[INFO] Successfully reload the Map!')

    def __len__(self):
        return len(self.nameList)
    
    def adjacency(self,provinceIndex):
        return self.adjList[provinceIndex]
    
    def stop(self):
        """Stop painting"""
        plt.show()


self.adjList = [[1,4],
                        [0,4,14],
                        [9,10],
                        [20,23,16,17,21],
                        [0,1,27,5,15,14,6],
                        [4,27,23,15],
                        [7,27,4],
                        [8,27,6],
                        [27,7],
                        [14,11,10,2],
                        [2,9,11,13,12,26],
                        [9,14,15,16,13,10],
                        [10,13,18,26],
                        [10,11,16,17,18,12],
                        [4,15,11,9,1],
                        [14,4,5,23,16,11],
                        [15,23,3,17,13,11],
                        [16,3,21,28,18,13],
                        [12,13,17,28,19,32,33],
                        [18,28,33],
                        [24,25,29,22,21,3,23],
                        [3,20,22,28,17],
                        [29,20,21,28],
                        [27,30,24,20,3,16,15,5],
                        [27,31,25,20,23,30],
                        [24,31,29,20],
                        [12,10],
                        [31,24,30,23,5,4,6,7,8],
                        [17,21,22,18,19],
                        [31,25,20,22],
                        [27,24,23],
                        [24,25,29,27],
                        [18,33],
                        [18,32,19]]